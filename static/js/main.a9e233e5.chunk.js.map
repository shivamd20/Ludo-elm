{"version":3,"sources":["GameStartCard.tsx","environment.tsx","useServer.tsx","MultiPlayerGame.tsx","useElmApplication.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameStartCard","onGameJoined","onGameStarted","error","loading","useState","roomName","setRoomName","className","map","num","PlayerNumberCard","key","number","onClick","type","placeholder","aria-label","value","onChange","e","target","disabled","length","environment","connectServerToApp","app","socket","play","sound","on","data","ports","diceRolledReceiver","send","moveCoinsReceiver","connectMessageToPorts","rollDice","subscribe","randomNumber","Math","floor","random","emit","moveCoins","message","connectPortsToMessages","audio","Audio","stop","pause","MultiPlayerGame","div","React","useRef","io","waiting","setWaiting","setError","players","setPlayers","undefined","room","setRoom","startOnlineGame","maxPlayers","newGameReceiver","joinOnlineGame","joinGameReceiver","order","useServer","setApp","useEffect","current","elmApp","window","Elm","Game","init","node","useElmApplication","isEveryoneJoined","every","player","isJoined","hidden","ref","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a9e233e5.chunk.js","sourcesContent":["import React, {useState} from 'react';\nexport function GameStartCard({\n  onGameJoined,\n  onGameStarted,\n  error,\n  loading,\n}: {\n  onGameJoined: (roomName: string) => void;\n  onGameStarted: (numberOfPlayers: number) => void;\n  error: string;\n  loading: boolean;\n}) {\n  const [roomName, setRoomName] = useState<string>('');\n  return (\n    <div className=\"flex  align-middle content-center   \">\n      <div className=\"mx-auto mt-20 justify-between flex flex-col text-center shadow-xl bg-gray-800 w-full max-w-sm h-96 p-8 \">\n        {loading ? (\n          <div className=\"m-auto text-blue-700 font-semibold\"> Loading... </div>\n        ) : (\n          <>\n            <div className=\"m-auto\">\n              <span className=\"  font-semibold text-lg pb-4\">\n                Select number of players to Start New Game\n              </span>\n              <div className=\"flex align-middle justify-center w-full \">\n                {[2, 3, 4].map((num) => (\n                  <PlayerNumberCard\n                    key={num}\n                    number={num}\n                    onClick={() => onGameStarted(num)}\n                  />\n                ))}\n              </div>\n            </div>\n\n            <span className=\"p-4 font-semibold \">\n              Have a Room Id?\n              <br></br>Enter Room Id and then hit Join Room\n            </span>\n            <form className=\"w-full max-w-sm\">\n              <div className=\"flex items-center border-b border-blue-500 py-2 \">\n                <input\n                  className=\"appearance-none bg-transparent border-none w-full text-gray-200 mr-3 py-1 px-2 leading-tight focus:outline-none focus:font-semibold\"\n                  type=\"text\"\n                  placeholder=\"Enter Room Name\"\n                  aria-label=\"Room to Join\"\n                  value={roomName}\n                  onChange={(e) => setRoomName(e.target.value)}\n                />\n                <button\n                  className=\"flex-shrink-0 bg-blue-500 hover:bg-blue-700 border-blue-500 hover:border-blue-700 text-sm border-4 text-white disabled:opacity-50 py-1 px-2 rounded\"\n                  type=\"button\"\n                  disabled={roomName.length === 0}\n                  onClick={() => onGameJoined(roomName)}\n                >\n                  Join Room\n                </button>\n              </div>\n            </form>\n          </>\n        )}\n        {error && (\n          <div className=\"m-auto text-red-500 text-lg font-semibold\">\n            {error}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction PlayerNumberCard({\n  number,\n  onClick,\n}: {\n  number: number;\n  onClick: () => void;\n}) {\n  return (\n    <button\n      key={number}\n      onClick={() => onClick()}\n      className=\"mx-3 my-4 p-4 flex hover:bg-blue-700    bg-blue-500 max-w-sm w-20 h-20 align-middle content-center text-center shadow-md rounded\"\n    >\n      {number} players\n    </button>\n  );\n}\n","export const environment = {\n  socketUrl: 'https://ludo-galaxy.herokuapp.com/',\n  diceRollSound: 'diceRoll.mp3',\n};\n","import {useState} from 'react';\nimport {environment} from './environment';\nimport io from 'socket.io-client';\nimport {ElmApp} from './useElmApplication';\n\ntype Player = {\n  order: number;\n  isConnected: boolean;\n  isJoined: boolean;\n};\n\nexport function useServer(app: ElmApp) {\n  const [socket] = useState(() => io(environment.socketUrl));\n  const [waiting, setWaiting] = useState(false);\n  const [error, setError] = useState('');\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [room, setRoom] = useState<string | undefined>(undefined);\n\n  const startOnlineGame = (maxPlayers: number): void => {\n    setWaiting(true);\n\n    socket.emit(\n      'create_room',\n      {maxPlayers},\n      (data: {error: any; roomName: any; players: Player[]}) => {\n        setWaiting(false);\n        if (data.error) {\n          setError(data.error);\n        } else {\n          connectServerToApp(app, socket);\n          app.ports.newGameReceiver.send([data.roomName, maxPlayers]);\n          setPlayers(data.players);\n          setRoom(data.roomName);\n        }\n      }\n    );\n  };\n\n  const joinOnlineGame = (roomName: string): void => {\n    setWaiting(true);\n    socket.emit(\n      'join_room',\n      {roomName},\n      (data: {error: any; order: any; maxPlayers: any; players: Player[]}) => {\n        setWaiting(false);\n        if (data.error) {\n          setError(data.error);\n        } else {\n          connectServerToApp(app, socket);\n          setPlayers(data.players);\n          setRoom(roomName);\n          app.ports.joinGameReceiver.send([\n            roomName,\n            data.order,\n            data.maxPlayers,\n          ]);\n        }\n      }\n    );\n  };\n\n  socket.on('update_room', (data: any) => {\n    setPlayers(data.players);\n  });\n\n  return {startOnlineGame, joinOnlineGame, waiting, error, players, room};\n}\n\nfunction connectServerToApp(app: ElmApp, socket: SocketIOClient.Socket) {\n  connectMessageToPorts(app, socket);\n  connectPortsToMessages(app, socket);\n}\n\nfunction connectPortsToMessages(app: ElmApp, socket: SocketIOClient.Socket) {\n  const {play} = sound();\n  app.ports.rollDice.subscribe(() => {\n    const randomNumber = Math.floor(Math.random() * 6) + 1;\n    play();\n\n    app.ports.diceRolledReceiver.send(randomNumber);\n\n    socket.emit('game_event', {type: 'roll_dice', data: randomNumber});\n  });\n\n  app.ports.moveCoins.subscribe((message: any) => {\n    play();\n    socket.emit('game_event', {type: 'move_coins', data: message});\n    app.ports.moveCoinsReceiver.send(message);\n  });\n}\n\nfunction connectMessageToPorts(app: ElmApp, socket: SocketIOClient.Socket) {\n  const {play} = sound();\n  socket.on('game_event', ({type, data}: {type: string; data: any}) => {\n    play();\n    switch (type) {\n      case 'roll_dice':\n        play();\n        app.ports.diceRolledReceiver.send(data);\n        break;\n      case 'move_coins':\n        app.ports.moveCoinsReceiver.send(data);\n        break;\n    }\n  });\n}\n\nfunction sound() {\n  const audio = new Audio(environment.diceRollSound);\n\n  const play = () => audio.play();\n  const stop = () => audio.pause();\n\n  return {play, stop};\n}\n","import React from 'react';\nimport {GameStartCard} from './GameStartCard';\nimport {useServer} from './useServer';\nimport {useElmApplication, ElmApp} from './useElmApplication';\n\nexport function MultiPlayerGame() {\n  const div: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null);\n\n  const {\n    joinOnlineGame,\n    startOnlineGame,\n    waiting,\n    error,\n    players,\n    room,\n  } = useServer(useElmApplication(div) as ElmApp);\n\n  const isEveryoneJoined =\n    players.length !== 0 && players.every((player) => player.isJoined);\n\n  return (\n    <>\n      <div hidden={!isEveryoneJoined}>\n        <div ref={div}></div>\n      </div>\n      {players.length ? (\n        !isEveryoneJoined ? (\n          <div className=\"flex  align-middle content-center   \">\n            <div className=\"mx-auto mt-20 justify-evenly flex flex-col text-center shadow-xl bg-gray-800 w-full max-w-sm h-96 p-8 \">\n              <div className=\"text-gray-300\">\n                Waiting for other players to join this game\n              </div>\n              <div className=\"font-semibold text-2xl text-white\">\n                Room {room}\n              </div>\n              <div>\n                <div className=\"flex flex-wrap p-2 justify-center  items-center text-center\">\n                  {players.map((player) => (\n                    <div\n                      key={player.order}\n                      className=\"\n                     hover:bg-blue-700 px-4   bg-blue-500 max-w-sm w-20 h-20 m-2\n                      flex shadow-md rounded justify-center  items-center text-center\"\n                    >\n                      <div>\n                        {player.isJoined\n                          ? `Player ${player.order} Joined`\n                          : `Waiting...`}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <></>\n        )\n      ) : (\n        <GameStartCard\n          onGameJoined={joinOnlineGame}\n          onGameStarted={startOnlineGame}\n          loading={waiting}\n          error={error}\n        />\n      )}\n    </>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nexport function useElmApplication(\n  div: React.MutableRefObject<HTMLDivElement | null>\n) {\n  const [app, setApp] = useState<ElmApp | undefined>(undefined);\n\n  useEffect(() => {\n    if (div.current) {\n      //@ts-ignore\n      const Game = window.Elm.Game;\n      const elmApp = Game.init({\n        node: div.current,\n      });\n      setApp(elmApp);\n    }\n  }, [div]);\n\n  return app;\n}\n\nexport type ElmApp = {\n  ports: {\n    newGameReceiver: {send: (arg0: any[]) => void};\n    joinGameReceiver: {send: (arg0: any[]) => void};\n    diceRolledReceiver: {send: (arg0: number) => void};\n    moveCoinsReceiver: {send: (arg0: string) => void};\n    rollDice: any;\n    moveCoins: any;\n  };\n};\n","import {MultiPlayerGame} from './MultiPlayerGame';\nimport React from 'react';\nfunction App() {\n  return <MultiPlayerGame />;\n}\n\nexport default App;\n\n// const div: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null);\n\n// React.useEffect(() => {\n//   const gameService: GameService = new GameService();\n//   if (div.current !== null) gameService.connectPortsToMessages(div.current);\n\n//   return () => {\n//     gameService.dispose();\n//   };\n// }, []);\n\n// return <div ref={div}> </div>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}