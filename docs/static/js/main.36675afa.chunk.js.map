{"version":3,"sources":["environment.tsx","service/game-service.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["environment","GameService","socket","diceRoll","this","io","src","soundDiv","document","createElement","setAttribute","style","display","body","appendChild","play","stop","pause","sound","element","app","window","Elm","Game","init","node","ports","rollDice","subscribe","randomNumber","Math","floor","random","diceRolledReceiver","send","emit","type","data","on","moveCoinsReceiver","moveCoins","message","joinGame","roomName","console","log","error","errorReceiver","joinGameReceiver","order","maxPlayers","createNewGame","newGameReceiver","close","App","div","React","useRef","useEffect","gameService","current","connectPortsToMessages","dispose","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gQAAaA,EACA,qCADAA,EAEI,eCCIC,E,WAInB,aAAe,yBAHfC,YAGc,OAFdC,cAEc,EACZC,KAAKF,OAASG,IAAGL,GACjBI,KAAKD,SAoFT,SAAeG,GACb,IAAMC,EAAWC,SAASC,cAAc,SASxC,OARAF,EAASD,IAAMA,EACfC,EAASG,aAAa,UAAW,QACjCH,EAASG,aAAa,WAAY,QAClCH,EAASI,MAAMC,QAAU,OACzBJ,SAASK,KAAKC,YAAYP,GAInB,CAACQ,KAHK,kBAAMR,EAASQ,QAGdC,KAFD,kBAAMT,EAASU,UA5FVC,CAAMlB,G,mEAGDmB,GAAuB,IAAD,OAIrCC,EAFOC,OAAOC,IAAIC,KAEPC,KAAK,CACpBC,KAAMN,IAGRC,EAAIM,MAAMC,SAASC,WAAU,WAC3B,IAAMC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACrD,EAAK7B,SAASY,OAEdK,EAAIM,MAAMO,mBAAmBC,KAAKL,GAElC,EAAK3B,OAAOiC,KAAK,aAAc,CAACC,KAAM,YAAaC,KAAMR,OAG3DzB,KAAKF,OAAOoC,GACV,cACA,YAAiD,IAA/CF,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAEN,OADA,EAAKlC,SAASY,OACNqB,GACN,IAAK,YACH,EAAKjC,SAASY,OACdK,EAAIM,MAAMO,mBAAmBC,KAAKG,GAClC,MACF,IAAK,aACHjB,EAAIM,MAAMa,kBAAkBL,KAAKG,OAMzCjB,EAAIM,MAAMc,UAAUZ,WAAU,SAACa,GAC7B,EAAKtC,SAASY,OACd,EAAKb,OAAOiC,KAAK,aAAc,CAACC,KAAM,aAAcC,KAAMI,IAC1DrB,EAAIM,MAAMa,kBAAkBL,KAAKO,MAGnCrB,EAAIM,MAAMgB,SAASd,WAAU,SAACe,GAC5B,EAAKzC,OAAOiC,KACV,YACA,CAACQ,aACD,SAACN,GACCO,QAAQC,IAAIR,GACRA,EAAKS,MACP1B,EAAIM,MAAMqB,cAAcb,KAAKG,EAAKS,OAElC1B,EAAIM,MAAMsB,iBAAiBd,KAAK,CAC9BS,EACAN,EAAKY,MACLZ,EAAKa,mBAOf9B,EAAIM,MAAMyB,cAAcvB,WAAU,SAACsB,GACjCN,QAAQC,IAAIK,GAEZ,EAAKhD,OAAOiC,KACV,cACA,CAACe,eACD,SAACb,GACCO,QAAQC,IAAIR,GACRA,EAAKS,MACP1B,EAAIM,MAAMqB,cAAcb,KAAKG,EAAKS,OAElC1B,EAAIM,MAAM0B,gBAAgBlB,KAAKG,EAAKM,kB,gCAQ5CvC,KAAKF,OAAOmD,Y,KCvEDC,MAff,WACE,IAAMC,EAAqDC,IAAMC,OAAO,MAWxE,OATAD,IAAME,WAAU,WACd,IAAMC,EAA2B,IAAI1D,EAGrC,OAFoB,OAAhBsD,EAAIK,SAAkBD,EAAYE,uBAAuBN,EAAIK,SAE1D,WACLD,EAAYG,aAEb,IAEI,yBAAKC,IAAKR,GAAV,MCHWS,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9D,SAAS+D,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLF,QAAQE,MAAMA,EAAML,c","file":"static/js/main.36675afa.chunk.js","sourcesContent":["export const environment = {\n  socketUrl: 'https://ludo-galaxy.herokuapp.com/',\n  diceRollSound: 'diceRoll.mp3',\n};\n","import io from 'socket.io-client';\nimport {environment} from '../environment';\n\nexport default class GameService {\n  socket: SocketIOClient.Socket;\n  diceRoll: {play: () => void; stop: () => void};\n\n  constructor() {\n    this.socket = io(environment.socketUrl);\n    this.diceRoll = sound(environment.diceRollSound);\n  }\n\n  connectPortsToMessages(element: HTMLElement) {\n    //@ts-ignore\n    const Game = window.Elm.Game;\n\n    const app = Game.init({\n      node: element,\n    });\n\n    app.ports.rollDice.subscribe(() => {\n      const randomNumber = Math.floor(Math.random() * 6) + 1;\n      this.diceRoll.play();\n\n      app.ports.diceRolledReceiver.send(randomNumber);\n\n      this.socket.emit('game_event', {type: 'roll_dice', data: randomNumber});\n    });\n\n    this.socket.on(\n      'game_event',\n      ({type, data}: {type: string; data: string}) => {\n        this.diceRoll.play();\n        switch (type) {\n          case 'roll_dice':\n            this.diceRoll.play();\n            app.ports.diceRolledReceiver.send(data);\n            break;\n          case 'move_coins':\n            app.ports.moveCoinsReceiver.send(data);\n            break;\n        }\n      }\n    );\n\n    app.ports.moveCoins.subscribe((message: any) => {\n      this.diceRoll.play();\n      this.socket.emit('game_event', {type: 'move_coins', data: message});\n      app.ports.moveCoinsReceiver.send(message);\n    });\n\n    app.ports.joinGame.subscribe((roomName: any) => {\n      this.socket.emit(\n        'join_room',\n        {roomName},\n        (data: {error: any; order: any; maxPlayers: any}) => {\n          console.log(data);\n          if (data.error) {\n            app.ports.errorReceiver.send(data.error);\n          } else {\n            app.ports.joinGameReceiver.send([\n              roomName,\n              data.order,\n              data.maxPlayers,\n            ]);\n          }\n        }\n      );\n    });\n\n    app.ports.createNewGame.subscribe((maxPlayers: any) => {\n      console.log(maxPlayers);\n\n      this.socket.emit(\n        'create_room',\n        {maxPlayers},\n        (data: {error: any; roomName: any}) => {\n          console.log(data);\n          if (data.error) {\n            app.ports.errorReceiver.send(data.error);\n          } else {\n            app.ports.newGameReceiver.send(data.roomName);\n          }\n        }\n      );\n    });\n  }\n\n  dispose() {\n    this.socket.close();\n  }\n}\n\nfunction sound(src: string) {\n  const soundDiv = document.createElement('audio');\n  soundDiv.src = src;\n  soundDiv.setAttribute('preload', 'auto');\n  soundDiv.setAttribute('controls', 'none');\n  soundDiv.style.display = 'none';\n  document.body.appendChild(soundDiv);\n  const play = () => soundDiv.play();\n  const stop = () => soundDiv.pause();\n\n  return {play, stop};\n}\n","import React from 'react';\nimport GameService from './service/game-service';\n\nfunction App() {\n  const div: React.MutableRefObject<HTMLDivElement | null> = React.useRef(null);\n\n  React.useEffect(() => {\n    const gameService: GameService = new GameService();\n    if (div.current !== null) gameService.connectPortsToMessages(div.current);\n\n    return () => {\n      gameService.dispose();\n    };\n  }, []);\n\n  return <div ref={div}> </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}